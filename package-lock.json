{
  "name": "cake",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "cake",
      "version": "1.0.0",
      "license": "ISC"
    }
  }
}
 polynomial

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

struct poly {
    int cf, px, py, pz, flag;
    struct poly *next;
};

typedef struct poly node;

node* getnode() {
    node nn = (node)malloc(sizeof(node));
    if (!nn) { printf("Insufficient memory\n"); exit(0); }
    return nn;
}

void display(node *head) {
    node *p = head->next;
    if (p == head) { printf("Polynomial does not exist\n"); return; }
    while (p != head) {
        printf("%dx^%dy^%dz^%d", p->cf, p->px, p->py, p->pz);
        if (p->next != head) printf(" + ");
        p = p->next;
    }
}

node* insert_rear(int cf, int x, int y, int z, node *head) {
    node *p = getnode();
    p->cf = cf; p->px = x; p->py = y; p->pz = z;
    node *v = head;
    while (v->next != head) v = v->next;
    v->next = p; p->next = head;
    return head;
}

node* read_poly(node *head) {
    int cf, px, py, pz, ch;
    do {
        printf("Enter coeff and powers of x, y, z: ");
        scanf("%d %d %d %d", &cf, &px, &py, &pz);
        head = insert_rear(cf, px, py, pz, head);
        printf("Continue? (1/0): ");
        scanf("%d", &ch);
    } while (ch != 0);
    return head;
}

node* add_poly(node *h1, node *h2, node *h3) {
    node *p1 = h1->next, *p2, *v;
    while (p1 != h1) {
        p2 = h2->next;
        while (p2 != h2 && (p2->px != p1->px || p2->py != p1->py || p2->pz != p1->pz)) p2 = p2->next;
        if (p2 != h2) {
            p2->flag = 1;
            if (p1->cf + p2->cf) h3 = insert_rear(p1->cf + p2->cf, p1->px, p1->py, p1->pz, h3);
        } else {
            h3 = insert_rear(p1->cf, p1->px, p1->py, p1->pz, h3);
        }
        p1 = p1->next;
    }
    p2 = h2->next;
    while (p2 != h2) {
        if (!p2->flag) h3 = insert_rear(p2->cf, p2->px, p2->py, p2->pz, h3);
        p2 = p2->next;
    }
    return h3;
}

void evaluate(node *head) {
    int x, y, z, result = 0;
    node *p = head->next;
    printf("\nEnter x, y, z to evaluate: ");
    scanf("%d %d %d", &x, &y, &z);
    while (p != head) {
        result += p->cf * pow(x, p->px) * pow(y, p->py) * pow(z, p->pz);
        p = p->next;
    }
    printf("Polynomial result is: %d\n", result);
}

int main() {
    node *h1 = getnode(), *h2 = getnode(), *h3 = getnode();
    h1->next = h1; h2->next = h2; h3->next = h3;
    int ch;
    while (1) {
        printf("\n1. Evaluate Polynomial\n2. Add Polynomials\n3. Exit\nEnter choice: ");
        scanf("%d", &ch);
        switch (ch) {
            case 1:
                printf("\nEnter polynomial to evaluate:\n");
                h1 = read_poly(h1);
                display(h1); evaluate(h1); break;
            case 2:
                printf("\nEnter first polynomial:\n");
                h1 = read_poly(h1);
                printf("\nEnter second polynomial:\n");
                h2 = read_poly(h2);
                h3 = add_poly(h1, h2, h3);
                printf("\nSum of polynomials:\n");
                display(h3); break;
            case 3: exit(0); break;
            default: printf("\nInvalid entry\n"); break;
        }
    }
}
